import { Dispatch, SetStateAction, useEffect, useState } from 'react';
import { toast } from 'react-toastify';

import { serverApi } from '@/redux/auth/authOperations';

import {
  CreateForm,
  Field,
  FieldLabel,
  FieldControl,
  ActionsRow,
  PrimaryBtn,
  SecondaryBtn,
  FieldsGrid,
  CheckboxWrapper,
  FieldWrap,
} from './UserShipmentsCreateForm.styled';

type Props = {
  client: IClient | null;
  id: string | undefined;
  loading: boolean;
  setLoading: Dispatch<SetStateAction<boolean>>;
  setShipmentList: Dispatch<SetStateAction<IShipment[]>>;
};

export const UserShipmentsCreateForm: React.FC<Props> = ({
  client,
  id,
  loading,
  setLoading,
  setShipmentList,
}) => {
  // –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è name/phone/company
  const [useClientName, setUseClientName] = useState<boolean>(true);
  const [useClientPhone, setUseClientPhone] = useState<boolean>(true);
  const [useClientCompany, setUseClientCompany] = useState<boolean>(true);

  // –ø–∞–º—è—Ç—å –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ toggling)
  const [prevManual, setPrevManual] = useState({
    name: '',
    phone: '',
    company: '',
  });

  const [createData, setCreateData] = useState<Partial<IShipment>>({
    delivery: 'post',
    payment: 'prepayment',
    deliveryCity: '',
    postOffice: '',
    deliveryPayment: 'client',
    name: '',
    phone: '',
    company: '',
  });

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ client: –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ client
  useEffect(() => {
    setCreateData(prev => ({
      ...prev,
      name: useClientName ? client?.name ?? '' : prev.name ?? '',
      phone: useClientPhone ? client?.phone ?? '' : prev.phone ?? '',
      company: useClientCompany ? client?.company ?? '' : prev.company ?? '',
    }));
    // –∑–∞–ø–æ–ª–Ω–∏–º prevManual –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    setPrevManual(prev => ({
      name: prev.name || client?.name || '',
      phone: prev.phone || client?.phone || '',
      company: prev.company || client?.company || '',
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [client]);

  // --- HELPERS ---

  const setFieldAndRemember = (
    field: 'name' | 'phone' | 'company',
    value: string
  ) => {
    // –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –º—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ–º manual value
    setPrevManual(prev => ({ ...prev, [field]: value }));
    // –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å —Å—Ç–æ—è–ª (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º) ‚Äî –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (
      (field === 'name' && useClientName) ||
      (field === 'phone' && useClientPhone) ||
      (field === 'company' && useClientCompany)
    ) {
      if (field === 'name') setUseClientName(false);
      if (field === 'phone') setUseClientPhone(false);
      if (field === 'company') setUseClientCompany(false);
    }
    setCreateData(prev => ({ ...prev, [field]: value }));
  };

  // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞ (–∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω/–∫–æ–º–ø–∞–Ω–∏—è)
  const toggleFieldCheckbox = (
    field: 'name' | 'phone' | 'company',
    checked: boolean
  ) => {
    if (field === 'name') setUseClientName(checked);
    if (field === 'phone') setUseClientPhone(checked);
    if (field === 'company') setUseClientCompany(checked);

    if (checked) {
      // –≤–∫–ª—é—á–∏–ª–∏ ‚Äî —Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —Å—Ç–∞–≤–∏–º prevManual (–µ—Å–ª–∏ –µ—Å—Ç—å)
      setCreateData(prev => ({
        ...prev,
        [field]: client
          ? client[field] ?? prevManual[field]
          : prevManual[field] ?? '',
      }));
    } else {
      // –≤—ã–∫–ª—é—á–∏–ª–∏ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º prevManual (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
      setCreateData(prev => ({
        ...prev,
        [field]: prevManual[field] ?? '',
      }));
    }
  };

  // –Ω–∏–∂–Ω–∏–π –æ–±—â–∏–π —á–µ–∫–±–æ–∫—Å ‚Äî —Å—Ç–∞–≤–∏—Ç/—Å–Ω–∏–º–∞–µ—Ç –≤—Å–µ
  const toggleAllCheckboxes = (checked: boolean) => {
    setUseClientName(checked);
    setUseClientPhone(checked);
    setUseClientCompany(checked);

    if (checked) {
      // —Å—Ç–∞–≤–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º prevManual)
      setCreateData(prev => ({
        ...prev,
        name: client ? client.name ?? prevManual.name : prevManual.name,
        phone: client ? client.phone ?? prevManual.phone : prevManual.phone,
        company: client
          ? client.company ?? prevManual.company
          : prevManual.company,
      }));
    } else {
      // —Å–Ω–∏–º–∞–µ–º –≤—Å–µ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º prevManual (–µ—Å–ª–∏ –±—ã–ª–∏ —Ä—É—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
      setCreateData(prev => ({
        ...prev,
        name: prevManual.name ?? '',
        phone: prevManual.phone ?? '',
        company: prevManual.company ?? '',
      }));
    }
  };

  // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∏–∂–Ω–µ–≥–æ —á–µ–∫–±–æ–∫—Å–∞: –≤—Å–µ –ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
  const allChecked = useClientName && useClientPhone && useClientCompany;

  // --- submit ---
  const createShipment = async () => {
    if (!id) {
      toast.error('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª–∏–µ–Ω—Ç');
      return;
    }

    setLoading(true);
    try {
      const payload = { ...createData, client: id };

      const { data } = await serverApi.post(
        `/clients/add-shipment/${id}`,
        payload
      );

      const newShipment = data?.newShipment; // üëà –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
      if (!newShipment?._id) {
        toast.error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª _id —É –Ω–æ–≤–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏');
        return;
      }

      setShipmentList(prev => [...prev, newShipment]);

      // –°–±—Ä–æ—Å–∏–º —Ñ–æ—Ä–º—É –Ω–µ —Ç—Ä–æ–≥–∞—è —á–µ–∫–±–æ–∫—Å—ã (–æ—Å—Ç–∞–≤–∏–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å),
      // –Ω–æ –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      setCreateData({
        delivery: 'post',
        payment: 'prepayment',
        deliveryCity: '',
        postOffice: '',
        deliveryPayment: 'client',
        name: useClientName ? client?.name ?? '' : prevManual.name ?? '',
        phone: useClientPhone ? client?.phone ?? '' : prevManual.phone ?? '',
        company: useClientCompany
          ? client?.company ?? ''
          : prevManual.company ?? '',
      });
    } catch (err) {
      console.error(err);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const clearForm = () => {
    setPrevManual({ name: '', phone: '', company: '' });

    setCreateData({
      delivery: 'post',
      payment: 'prepayment',
      deliveryCity: '',
      postOffice: '',
      deliveryPayment: 'client',
      name: useClientName ? client?.name ?? '' : '',
      phone: useClientPhone ? client?.phone ?? '' : '',
      company: useClientCompany ? client?.company ?? '' : '',
    });
  };

  return (
    <CreateForm>
      <FieldsGrid>
        <Field>
          <FieldLabel>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</FieldLabel>
          <FieldControl
            as="select"
            value={createData.delivery}
            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>
              setCreateData(prev => ({
                ...prev,
                delivery: e.target.value as DeliveryMethod,
              }))
            }
          >
            <option value="post">–ù–æ–≤–∞—è –ü–æ—á—Ç–∞</option>
            <option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</option>
          </FieldControl>
        </Field>

        <Field>
          <FieldLabel>–û–ø–ª–∞—Ç–∞</FieldLabel>
          <FieldControl
            as="select"
            value={createData.payment}
            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>
              setCreateData(prev => ({
                ...prev,
                payment: e.target.value as PaymentMethod,
              }))
            }
          >
            <option value="prepayment">–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</option>
            <option value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏</option>
            <option value="card">–ù–∞ –∫–∞—Ä—Ç—É</option>
            <option value="cod">–ù–∞–ª–æ–∂–∫–∞</option>
          </FieldControl>
        </Field>

        {/* –ò–º—è */}
        <FieldWrap>
          <Field>
            <FieldLabel>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è</FieldLabel>
            <FieldControl
              value={createData.name || ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFieldAndRemember('name', e.target.value)
              }
              placeholder="–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
            />
          </Field>
          <CheckboxWrapper>
            <input
              id="useClientName"
              type="checkbox"
              checked={useClientName}
              onChange={e => toggleFieldCheckbox('name', e.target.checked)}
            />
            <label htmlFor="useClientName">–°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º</label>
          </CheckboxWrapper>
        </FieldWrap>

        {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
        <FieldWrap>
          <Field>
            <FieldLabel>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è</FieldLabel>
            <FieldControl
              value={createData.phone || ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFieldAndRemember('phone', e.target.value)
              }
              placeholder="+38 (0XX) XXX-XX-XX"
            />
          </Field>
          <CheckboxWrapper>
            <input
              id="useClientPhone"
              type="checkbox"
              checked={useClientPhone}
              onChange={e => toggleFieldCheckbox('phone', e.target.checked)}
            />
            <label htmlFor="useClientPhone">–°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º</label>
          </CheckboxWrapper>
        </FieldWrap>

        {/* –ö–æ–º–ø–∞–Ω–∏—è */}
        <FieldWrap>
          <Field>
            <FieldLabel>–ö–æ–º–ø–∞–Ω–∏—è</FieldLabel>
            <FieldControl
              value={createData.company || ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFieldAndRemember('company', e.target.value)
              }
              placeholder="–ö–æ–º–ø–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)"
            />
          </Field>
          <CheckboxWrapper>
            <input
              id="useClientCompany"
              type="checkbox"
              checked={useClientCompany}
              onChange={e => toggleFieldCheckbox('company', e.target.checked)}
            />
            <label htmlFor="useClientCompany">–°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º</label>
          </CheckboxWrapper>
        </FieldWrap>

        {createData.delivery === 'post' && (
          <>
            <Field>
              <FieldLabel>–ì–æ—Ä–æ–¥</FieldLabel>
              <FieldControl
                value={createData.deliveryCity || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setCreateData(prev => ({
                    ...prev,
                    deliveryCity: e.target.value,
                  }))
                }
              />
            </Field>

            <Field>
              <FieldLabel>–û—Ç–¥–µ–ª–µ–Ω–∏–µ</FieldLabel>
              <FieldControl
                value={createData.postOffice || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setCreateData(prev => ({
                    ...prev,
                    postOffice: e.target.value,
                  }))
                }
              />
            </Field>

            <Field>
              <FieldLabel>–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</FieldLabel>
              <FieldControl
                as="select"
                value={createData.deliveryPayment || 'client'}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setCreateData(prev => ({
                    ...prev,
                    deliveryPayment: e.target.value as
                      | 'client'
                      | 'shop'
                      | 'clientBank'
                      | 'shopBank',
                  }))
                }
              >
                <option value="client">–ö–ª–∏–µ–Ω—Ç</option>
                <option value="shop">–ú–∞–≥–∞–∑–∏–Ω</option>
                <option value="clientBank">–ö–ª–∏–µ–Ω—Ç –ø–æ –±/–Ω</option>
                <option value="shopBank">–ú–∞–≥–∞–∑–∏–Ω –ø–æ –±/–Ω</option>
              </FieldControl>
            </Field>
          </>
        )}
      </FieldsGrid>

      <ActionsRow>
        <div>
          <input
            id="unsetAll"
            type="checkbox"
            checked={allChecked}
            onChange={e => toggleAllCheckboxes(e.target.checked)}
          />
          <label htmlFor="unsetAll" style={{ marginLeft: 8 }}>
            –°–Ω—è—Ç—å/–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          </label>
        </div>

        <PrimaryBtn onClick={createShipment} disabled={loading}>
          –°–æ–∑–¥–∞—Ç—å
        </PrimaryBtn>
        <SecondaryBtn onClick={clearForm}>–û—á–∏—Å—Ç–∏—Ç—å</SecondaryBtn>
      </ActionsRow>
    </CreateForm>
  );
};

export default UserShipmentsCreateForm;
